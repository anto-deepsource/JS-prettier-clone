// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`declare-index-signature.ts format 1`] = `
====================================options=====================================
parsers: ["babel-ts"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// Invalid, but recoverable
class C {
  declare [key: string]: string;
}

=====================================output=====================================
// Invalid, but recoverable
class C {
  declare [key: string]: string;
}

================================================================================
`;

exports[`invalid-modifiers.ts format 1`] = `
====================================options=====================================
parsers: ["babel-ts"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
interface Foo {
  private a();
  public b();
  protected c();
  static d();
  declare e();
  abstract f();
  readonly g();
}

class Bar {
  declare e() {};
  readonly g() {};
}

=====================================output=====================================
interface Foo {
  private a();
  public b();
  protected c();
  static d();
  declare e();
  abstract f();
  readonly g();
}

class Bar {
  declare e() {}
  readonly g() {}
}

================================================================================
`;

exports[`parenthesized-decorators-call-expression.ts format 1`] = `
====================================options=====================================
parsers: ["babel-ts"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@(test().x("global").y())
class X {}

=====================================output=====================================
@(test().x("global").y())
class X {}

================================================================================
`;

exports[`parenthesized-decorators-tagged-template.ts format 1`] = `
====================================options=====================================
parsers: ["babel-ts"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class Test {
  @(foo\`bar\`)
  text: string = "text"
}

=====================================output=====================================
class Test {
  @(foo\`bar\`)
  text: string = "text";
}

================================================================================
`;

exports[`prettier-ignore-nested-unions.ts format 1`] = `
====================================options=====================================
parsers: ["babel-ts"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
export type a =
  // foo
  | foo1&foo2
  // bar
  | bar1&bar2
  // prettier-ignore
  | (
    | aaaaaaaaaaaaa&1
    // b
    | bbbbbbbbbbbbb&2
  )
  // baz
  | baz1&baz2;

export type b =
  // foo
  | foo1&foo2
  // bar
  | bar1&bar2
  | (
    // prettier-ignore
    | aaaaaaaaaaaaa&1
    // b
    | bbbbbbbbbbbbb&2
  )
  // baz
  | baz1&baz2;

=====================================output=====================================
export type a =
  // foo
  | (foo1 & foo2)
  // bar
  | (bar1 & bar2)
  // prettier-ignore
  | (
    | aaaaaaaaaaaaa&1
    // b
    | bbbbbbbbbbbbb&2
  )
  // baz
  | (baz1 & baz2);

export type b =
  // foo
  | (foo1 & foo2)
  // bar
  | (bar1 & bar2)
  | (
      | // prettier-ignore
      aaaaaaaaaaaaa&1
      // b
      | (bbbbbbbbbbbbb & 2)
    )
  // baz
  | (baz1 & baz2);

================================================================================
`;

exports[`prettier-ignore-parenthesized-type.ts format 1`] = `
====================================options=====================================
parsers: ["babel-ts"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
type Foo =
  // prettier-ignore
  (
    aa
  );

=====================================output=====================================
type Foo =
  // prettier-ignore
  (
    aa
  );

================================================================================
`;

exports[`ts-4.7-infer-extends.ts format 1`] = `
====================================options=====================================
parsers: ["babel-ts"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
type X3<T> = T extends [infer U extends number] ? MustBeNumber<U> : never;
type X4<T> = T extends [infer U extends number, infer U extends number] ? MustBeNumber<U> : never;
type X5<T> = T extends [infer U extends number, infer U] ? MustBeNumber<U> : never;
type X6<T> = T extends [infer U, infer U extends number] ? MustBeNumber<U> : never;
type X7<T> = T extends [infer U extends string, infer U extends number] ? U : never;
type X8<U, T> = T extends infer U extends number ? U : T;
type X9<U, T> = T extends (infer U extends number ? U : T) ? U : T;

=====================================output=====================================
type X3<T> = T extends [infer U extends number] ? MustBeNumber<U> : never;
type X4<T> = T extends [infer U extends number, infer U extends number]
  ? MustBeNumber<U>
  : never;
type X5<T> = T extends [infer U extends number, infer U]
  ? MustBeNumber<U>
  : never;
type X6<T> = T extends [infer U, infer U extends number]
  ? MustBeNumber<U>
  : never;
type X7<T> = T extends [infer U extends string, infer U extends number]
  ? U
  : never;
type X8<U, T> = T extends infer U extends number ? U : T;
type X9<U, T> = T extends (infer U extends number ? U : T) ? U : T;

================================================================================
`;

exports[`ts-4.7-instantiation-expression.ts format 1`] = `
====================================options=====================================
parsers: ["babel-ts"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// basic
const foo = bar<T>;

// typeof
let x: typeof y.z<w>;

// new
new A<T>;

=====================================output=====================================
// basic
const foo = bar<T>;

// typeof
let x: typeof y.z<w>;

// new
new A<T>();

================================================================================
`;

exports[`ts-4.7-optional-variance.ts format 1`] = `
====================================options=====================================
parsers: ["babel-ts"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
type Covariant<out T> = {
    x: T;
}
type Contravariant<in T> = {
    f: (x: T) => void;
}
type Invariant<in out T> = {
    f: (x: T) => T;
}
type T10<out T> = T;
type T11<in T> = keyof T;
type T12<out T, out K extends keyof T> = T[K];
type T13<in out T> = T[keyof T];

type Covariant1<in T> = {
    x: T;
}

type Contravariant1<out T> = keyof T;

type Contravariant2<out T> = {
    f: (x: T) => void;
}

type Invariant1<in T> = {
    f: (x: T) => T;
}

type Invariant2<out T> = {
    f: (x: T) => T;
}
type Foo1<in T> = {
    x: T;
    f: FooFn1<T>;
}

type Foo2<out T> = {
    x: T;
    f: FooFn2<T>;
}

type Foo3<in out T> = {
    x: T;
    f: FooFn3<T>;
}

type T21<in out T> = T;

interface Baz<out T> {}
interface Baz<in T> {}

interface Parent<out A> {
    child: Child<A> | null;
    parent: Parent<A> | null;
}

declare class StateNode<TContext, in out TEvent extends { type: string }> {
    _storedEvent: TEvent;
    _action: ActionObject<TEvent>;
    _state: StateNode<TContext, any>;
}

=====================================output=====================================
type Covariant<out T> = {
  x: T;
};
type Contravariant<in T> = {
  f: (x: T) => void;
};
type Invariant<in out T> = {
  f: (x: T) => T;
};
type T10<out T> = T;
type T11<in T> = keyof T;
type T12<out T, out K extends keyof T> = T[K];
type T13<in out T> = T[keyof T];

type Covariant1<in T> = {
  x: T;
};

type Contravariant1<out T> = keyof T;

type Contravariant2<out T> = {
  f: (x: T) => void;
};

type Invariant1<in T> = {
  f: (x: T) => T;
};

type Invariant2<out T> = {
  f: (x: T) => T;
};
type Foo1<in T> = {
  x: T;
  f: FooFn1<T>;
};

type Foo2<out T> = {
  x: T;
  f: FooFn2<T>;
};

type Foo3<in out T> = {
  x: T;
  f: FooFn3<T>;
};

type T21<in out T> = T;

interface Baz<out T> {}
interface Baz<in T> {}

interface Parent<out A> {
  child: Child<A> | null;
  parent: Parent<A> | null;
}

declare class StateNode<TContext, in out TEvent extends { type: string }> {
  _storedEvent: TEvent;
  _action: ActionObject<TEvent>;
  _state: StateNode<TContext, any>;
}

================================================================================
`;

exports[`ts-4.7-optional-variance-with-jsx.tsx format 1`] = `
====================================options=====================================
parsers: ["babel-ts"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// valid JSX
<in T>() => {}</in>;

type Covariant<out T> = {
    x: T;
}
type Contravariant<in T> = {
    f: (x: T) => void;
}
type Invariant<in out T> = {
    f: (x: T) => T;
}
type T10<out T> = T;
type T11<in T> = keyof T;
type T12<out T, out K extends keyof T> = T[K];
type T13<in out T> = T[keyof T];

type Covariant1<in T> = {
    x: T;
}

type Contravariant1<out T> = keyof T;

type Contravariant2<out T> = {
    f: (x: T) => void;
}

type Invariant1<in T> = {
    f: (x: T) => T;
}

type Invariant2<out T> = {
    f: (x: T) => T;
}
type Foo1<in T> = {
    x: T;
    f: FooFn1<T>;
}

type Foo2<out T> = {
    x: T;
    f: FooFn2<T>;
}

type Foo3<in out T> = {
    x: T;
    f: FooFn3<T>;
}

type T21<in out T> = T;

interface Baz<out T> {}
interface Baz<in T> {}

interface Parent<out A> {
    child: Child<A> | null;
    parent: Parent<A> | null;
}

declare class StateNode<TContext, in out TEvent extends { type: string }> {
    _storedEvent: TEvent;
    _action: ActionObject<TEvent>;
    _state: StateNode<TContext, any>;
}

=====================================output=====================================
// valid JSX
<in T>() => {}</in>;

type Covariant<out T> = {
  x: T;
};
type Contravariant<in T> = {
  f: (x: T) => void;
};
type Invariant<in out T> = {
  f: (x: T) => T;
};
type T10<out T> = T;
type T11<in T> = keyof T;
type T12<out T, out K extends keyof T> = T[K];
type T13<in out T> = T[keyof T];

type Covariant1<in T> = {
  x: T;
};

type Contravariant1<out T> = keyof T;

type Contravariant2<out T> = {
  f: (x: T) => void;
};

type Invariant1<in T> = {
  f: (x: T) => T;
};

type Invariant2<out T> = {
  f: (x: T) => T;
};
type Foo1<in T> = {
  x: T;
  f: FooFn1<T>;
};

type Foo2<out T> = {
  x: T;
  f: FooFn2<T>;
};

type Foo3<in out T> = {
  x: T;
  f: FooFn3<T>;
};

type T21<in out T> = T;

interface Baz<out T> {}
interface Baz<in T> {}

interface Parent<out A> {
  child: Child<A> | null;
  parent: Parent<A> | null;
}

declare class StateNode<TContext, in out TEvent extends { type: string }> {
  _storedEvent: TEvent;
  _action: ActionObject<TEvent>;
  _state: StateNode<TContext, any>;
}

================================================================================
`;

exports[`tuple-labeled-ts.ts format 1`] = `
====================================options=====================================
parsers: ["babel-ts"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// Invalid label 1
type T = [x.y: A];

// Invalid label 2
type T = [x<y>: A];

=====================================output=====================================
// Invalid label 1
type T = [x.y: A];

// Invalid label 2
type T = [x<y>: A];

================================================================================
`;
